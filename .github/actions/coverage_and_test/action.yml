name: "Test and coverage check"
description: "Test and coverage check with gcovr, pass if coverage is greater than 20%"

runs:
  using: "composite"
  steps:
    - name: "Run coverage"
      shell: bash
      run: |
        PROJECT_PATH=$(pwd)

        # The '--test-dir' argument specifies the directory containing the test files.
        # The '--output-on-failure' argument tells 'ctest' to display the output of failing tests.
        ctest --test-dir build/tests --output-on-failure

        # 'gcovr' is a tool that provides a convenient way to run 'gcov' and summarize code coverage.
        # The '-r' argument specifies the root directory of the project.
        # The '.' after '-r $PROJECT_PATH' tells 'gcovr' to search the current directory and its subdirectories.
        # The output of 'gcovr' is redirected to a file called 'coverage.txt'.
        gcovr -r $PROJECT_PATH . > $PROJECT_PATH/coverage.txt

        echo "Runnig: gcovr -r $PROJECT_PATH ."

        cat $PROJECT_PATH/coverage.txt

        # Find the value of correct coverage
        # This command finds the line containing the word "TOTAL" in the 'coverage.txt' file.
        # Then use 'awk' to print the last column of that line, which is the coverage percentage.
        # Finally, use 'cut' to remove the percentage sign, leaving just the number.
        COVERAGE_RESULT=$(grep "TOTAL" $PROJECT_PATH/coverage.txt | awk '{print $NF}' | cut -d '%' -f 1)

        # Coverage lines GT 20
        if [ "$(echo "$COVERAGE_RESULT > 20" | bc)" -eq 1 ]; then
            echo "Coverage is greater than 20%. Nice!"
            exit 0
        else
            echo "Error: Coverage is less than or equal to 20%"
            exit 1
        fi

    # Upload errors as an artifact, when failed
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: Tests or coverage errors!!!
        path: $(pwd)/error_flag.txt
        retention-days: 1
